using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace SourceGenerators.Generators;

[Generator]
public class GenerateCopyMethodGenerator : IIncrementalGenerator
{
    const string generatedNs = nameof(SourceGenerators);
    const string generatedAttrib = nameof(GenerateCopyMethodAttribute);

    public void Initialize(IncrementalGeneratorInitializationContext initContext)
    {
        // Retrieve method nodes with the cache attribute
        var nodes = initContext.SyntaxProvider.ForAttributeWithMetadataName(
            $"{generatedNs}.{generatedAttrib}",
            static (syntaxNode, _) => syntaxNode is BaseMethodDeclarationSyntax,
            static (context, _) => Helpers.GetMethodInfo(context)
        );

        // Add the final source for the augmented methods
        initContext.RegisterSourceOutput(
            nodes,
            static (context, node) =>
            {
                var sourceText = SourceText.From(
                    $$"""
// <autogenerated />
namespace {{node.Namespace}};
using {{generatedNs}};

{{node.ClassModifiers}} class {{node.ClassName}}{{node.ClassTypeParameters}}
{
    {{node.MethodModifiers}} {{node.ReturnType}} {{node.MethodName}}Copy{{node.MethodTypeParameters}}({{node.ParamsDefinitions}})
    {
        Console.WriteLine("Call from copy");
        return {{node.MethodName}}({{node.ParamsCall}});
    }
}
""",
                    Encoding.UTF8
                );

                context.AddSource($"{node.Filename}.g.cs", sourceText);
            }
        );
    }
}
